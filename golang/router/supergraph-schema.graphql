schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type EmailHost
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: REVIEWS, key: "id")
{
  id: String! @join__field(graph: ACCOUNTS)
  name: String! @join__field(graph: ACCOUNTS)
}

type Manufacturer
  @join__owner(graph: PRODUCTS)
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: REVIEWS, key: "id")
{
  id: String! @join__field(graph: PRODUCTS)
  name: String! @join__field(graph: PRODUCTS)
}

type Product
  @join__owner(graph: PRODUCTS)
  @join__type(graph: PRODUCTS, key: "manufacturer{id} id")
  @join__type(graph: PRODUCTS, key: "upc")
  @join__type(graph: REVIEWS, key: "manufacturer{id} id")
{
  id: String! @join__field(graph: PRODUCTS)
  manufacturer: Manufacturer! @join__field(graph: PRODUCTS)
  name: String! @join__field(graph: PRODUCTS)
  price: Int! @join__field(graph: PRODUCTS)
  reviews: [Review] @join__field(graph: REVIEWS)
  upc: String! @join__field(graph: PRODUCTS)
}

type Query {
  me: User @join__field(graph: ACCOUNTS)
  topProducts(first: Int = 5): [Product] @join__field(graph: PRODUCTS)
}

type Review {
  author: User! @join__field(graph: REVIEWS, provides: "username")
  body: String!
  product: Product!
}

type User
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: REVIEWS, key: "id")
{
  email: String! @join__field(graph: ACCOUNTS)
  host: EmailHost! @join__field(graph: ACCOUNTS)
  id: ID! @join__field(graph: ACCOUNTS)
  reviews: [Review] @join__field(graph: REVIEWS, requires: "host{id} email")
  username: String! @join__field(graph: ACCOUNTS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://localhost:4001/query")
  PRODUCTS @join__graph(name: "products" url: "http://localhost:4002/query")
  REVIEWS @join__graph(name: "reviews" url: "http://localhost:4003/query")
}
